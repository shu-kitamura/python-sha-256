import pytest

from src.sha256 import padding, preprocess, split_block_into_words, split_into_blocks


def test_padding():
    assert padding("test") == b'\x74\x65\x73\x74' + b'\x80' + (b'\x00' * 51) + b'\x00\x00\x00\x00\x00\x00\x00\x20'
    assert padding("") == b'\x80' + (b'\x00' * 62) + b'\x00'
    assert padding("a" * 55) == (b'\x61' * 55) + b'\x80' + b'\x00\x00\x00\x00\x00\x00\x01\xb8'
    assert padding("a" * 56) == (b'\x61' * 56) + b'\x80' + (b'\x00' * 63) + b'\x00\x00\x00\x00\x00\x00\x01\xc0'
    assert padding("a" * 120) == (b'\x61' * 120) + b'\x80' + (b'\x00' * 63) + b'\x00\x00\x00\x00\x00\x00\x03\xc0'

def test_split_into_blocks():
    # 分割後が 1 block になるテストケース
    input_bytes1 = b'\x74\x65\x73\x74' + b'\x80' + (b'\x00' * 51) + b'\x00\x00\x00\x00\x00\x00\x00\x20'
    expect_brocks1 = [input_bytes1]
    assert split_into_blocks(input_bytes1) == expect_brocks1

    # 分割後が 2 block になるテストケース
    input_bytes2 = (b'\x61' * 56) + b'\x80' + (b'\x00' * 63) + b'\x00\x00\x00\x00\x00\x00\x01\xc0'
    expect_brocks2 = [
        (b'\x61' * 56) + b'\x80' + (b'\x00' * 7),
        (b'\x00' * 56) + b'\x00\x00\x00\x00\x00\x00\x01\xc0'
    ]
    assert split_into_blocks(input_bytes2) == expect_brocks2
    # 分割後が 3 block になるテストケース
    input_bytes3 = (b'\x61' * 120) + b'\x80' + (b'\x00' * 63) + b'\x00\x00\x00\x00\x00\x00\x03\xc0'
    expect_brocks3 = [
        (b'\x61' * 64),
        (b'\x61' * 56) + b'\x80' + (b'\x00' * 7),
        (b'\x00' * 56) + b'\x00\x00\x00\x00\x00\x00\x03\xc0'
    ]
    assert split_into_blocks(input_bytes3) == expect_brocks3

def test_split_block_into_words():
    input_bytes = b'\x74\x65\x73\x74' + b'\x80' + (b'\x00' * 51) + b'\x00\x00\x00\x00\x00\x00\x00\x20'
    expect_words = [
        b'\x74\x65\x73\x74', b'\x80\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x20',
    ]
    assert split_block_into_words(input_bytes) == expect_words

    with pytest.raises(ValueError) as e:
        split_block_into_words(b'\x74\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x20')
        assert str(e.value) == "Input block must be exactly 64 bytes"

def test_preprocess():
    input_str1 = "test"
    expect1 = [[
        b'\x74\x65\x73\x74', b'\x80\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x20',
    ]]
    assert preprocess(input_str1) == expect1

    input_str2 = "a" * 56
    expect2 = [[
        b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61',
        b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61',
        b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x61\x61\x61\x61',
        b'\x61\x61\x61\x61', b'\x61\x61\x61\x61', b'\x80\x00\x00\x00', b'\x00\x00\x00\x00',
    ],[
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x01\xc0',
    ]]
    assert preprocess(input_str2) == expect2

    input_str3 = "hello"
    expect3 = [[
        b'\x68\x65\x6c\x6c', b'\x6f\x80\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x00', b'\x00\x00\x00\x28'
    ]]
    assert preprocess(input_str3) == expect3
